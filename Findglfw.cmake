

include(FindPackageHandleStandardArgs)

message(STATUS "Conan: Using autogenerated Findglfw.cmake")
# Global approach
set(glfw_FOUND 1)
set(glfw_VERSION "3.3")

find_package_handle_standard_args(glfw REQUIRED_VARS glfw_VERSION VERSION_VAR glfw_VERSION)
mark_as_advanced(glfw_FOUND glfw_VERSION)



set(glfw_INCLUDE_DIRS "/Users/pete/.conan/data/glfw/3.3/bincrafters/stable/package/534dcc368c999e07e81f146b3466b8f656ef1f55/include")
set(glfw_INCLUDES "/Users/pete/.conan/data/glfw/3.3/bincrafters/stable/package/534dcc368c999e07e81f146b3466b8f656ef1f55/include")
set(glfw_DEFINITIONS )
set(glfw_LINKER_FLAGS_LIST "" "-framework OpenGL -framework Cocoa -framework IOKit -framework CoreVideo")
set(glfw_COMPILE_DEFINITIONS )
set(glfw_COMPILE_OPTIONS_LIST "" "")
set(glfw_LIBRARIES_TARGETS "") # Will be filled later, if CMake 3
set(glfw_LIBRARIES "") # Will be filled later
set(glfw_LIBS "") # Same as glfw_LIBRARIES

mark_as_advanced(glfw_INCLUDE_DIRS
                 glfw_INCLUDES
                 glfw_DEFINITIONS
                 glfw_LINKER_FLAGS_LIST
                 glfw_COMPILE_DEFINITIONS
                 glfw_COMPILE_OPTIONS_LIST
                 glfw_LIBRARIES
                 glfw_LIBS
                 glfw_LIBRARIES_TARGETS)

# Find the real .lib/.a and add them to glfw_LIBS and glfw_LIBRARY_LIST
set(glfw_LIBRARY_LIST glfw3)
set(glfw_LIB_DIRS "/Users/pete/.conan/data/glfw/3.3/bincrafters/stable/package/534dcc368c999e07e81f146b3466b8f656ef1f55/lib")
foreach(_LIBRARY_NAME ${glfw_LIBRARY_LIST})
    unset(CONAN_FOUND_LIBRARY CACHE)
    find_library(CONAN_FOUND_LIBRARY NAME ${_LIBRARY_NAME} PATHS ${glfw_LIB_DIRS}
                 NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
    if(CONAN_FOUND_LIBRARY)
        list(APPEND glfw_LIBRARIES ${CONAN_FOUND_LIBRARY})
        if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
            # Create a micro-target for each lib/a found
            set(_LIB_NAME CONAN_LIB::glfw_${_LIBRARY_NAME})
            if(NOT TARGET ${_LIB_NAME})
                # Create a micro-target for each lib/a found
                add_library(${_LIB_NAME} UNKNOWN IMPORTED)
                set_target_properties(${_LIB_NAME} PROPERTIES IMPORTED_LOCATION ${CONAN_FOUND_LIBRARY})
            else()
                message(STATUS "Skipping already existing target: ${_LIB_NAME}")
            endif()
            list(APPEND glfw_LIBRARIES_TARGETS ${_LIB_NAME})
        endif()
        message(STATUS "Found: ${CONAN_FOUND_LIBRARY}")
    else()
        message(STATUS "Library ${_LIBRARY_NAME} not found in package, might be system one")
        list(APPEND glfw_LIBRARIES_TARGETS ${_LIBRARY_NAME})
        list(APPEND glfw_LIBRARIES ${_LIBRARY_NAME})
    endif()
endforeach()
set(glfw_LIBS ${glfw_LIBRARIES})

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET glfw::glfw)
        add_library(glfw::glfw INTERFACE IMPORTED)
        
    if(glfw_INCLUDE_DIRS)
      set_target_properties(glfw::glfw PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${glfw_INCLUDE_DIRS}")
    endif()
    set_property(TARGET glfw::glfw PROPERTY INTERFACE_LINK_LIBRARIES ${glfw_LIBRARIES_TARGETS} "${glfw_LINKER_FLAGS_LIST}")
    set_property(TARGET glfw::glfw PROPERTY INTERFACE_COMPILE_DEFINITIONS ${glfw_COMPILE_DEFINITIONS})
    set_property(TARGET glfw::glfw PROPERTY INTERFACE_COMPILE_OPTIONS "${glfw_COMPILE_OPTIONS_LIST}")

        
    endif()
endif()
